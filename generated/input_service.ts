/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: input_service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class KeyEvent extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        delay?: number;
        data?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("delay" in data && data.delay != undefined) {
                this.delay = data.delay;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get delay() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set delay(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get data() {
        return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
    }
    set data(value: Uint8Array) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        delay?: number;
        data?: Uint8Array;
    }): KeyEvent {
        const message = new KeyEvent({});
        if (data.delay != null) {
            message.delay = data.delay;
        }
        if (data.data != null) {
            message.data = data.data;
        }
        return message;
    }
    toObject() {
        const data: {
            delay?: number;
            data?: Uint8Array;
        } = {};
        if (this.delay != null) {
            data.delay = this.delay;
        }
        if (this.data != null) {
            data.data = this.data;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.delay != 0)
            writer.writeUint64(1, this.delay);
        if (this.data.length)
            writer.writeBytes(2, this.data);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeyEvent {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeyEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.delay = reader.readUint64();
                    break;
                case 2:
                    message.data = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): KeyEvent {
        return KeyEvent.deserialize(bytes);
    }
}
export class StartRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        filename?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filename" in data && data.filename != undefined) {
                this.filename = data.filename;
            }
        }
    }
    get filename() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set filename(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        filename?: string;
    }): StartRequest {
        const message = new StartRequest({});
        if (data.filename != null) {
            message.filename = data.filename;
        }
        return message;
    }
    toObject() {
        const data: {
            filename?: string;
        } = {};
        if (this.filename != null) {
            data.filename = this.filename;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.filename.length)
            writer.writeString(1, this.filename);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StartRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StartRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.filename = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StartRequest {
        return StartRequest.deserialize(bytes);
    }
}
export class StopRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): StopRequest {
        const message = new StopRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StopRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StopRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StopRequest {
        return StopRequest.deserialize(bytes);
    }
}
export class ListRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): ListRequest {
        const message = new ListRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListRequest {
        return ListRequest.deserialize(bytes);
    }
}
export class StopReplayRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): StopReplayRequest {
        const message = new StopReplayRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StopReplayRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StopReplayRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StopReplayRequest {
        return StopReplayRequest.deserialize(bytes);
    }
}
export class StatusResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        message?: string;
    }): StatusResponse {
        const message = new StatusResponse({});
        if (data.message != null) {
            message.message = data.message;
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StatusResponse {
        return StatusResponse.deserialize(bytes);
    }
}
export class MacroEvent extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        eventDescription?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("eventDescription" in data && data.eventDescription != undefined) {
                this.eventDescription = data.eventDescription;
            }
        }
    }
    get eventDescription() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set eventDescription(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        eventDescription?: string;
    }): MacroEvent {
        const message = new MacroEvent({});
        if (data.eventDescription != null) {
            message.eventDescription = data.eventDescription;
        }
        return message;
    }
    toObject() {
        const data: {
            eventDescription?: string;
        } = {};
        if (this.eventDescription != null) {
            data.eventDescription = this.eventDescription;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.eventDescription.length)
            writer.writeString(1, this.eventDescription);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MacroEvent {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MacroEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.eventDescription = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MacroEvent {
        return MacroEvent.deserialize(bytes);
    }
}
export class ReplayRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        filename?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filename" in data && data.filename != undefined) {
                this.filename = data.filename;
            }
        }
    }
    get filename() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set filename(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        filename?: string;
    }): ReplayRequest {
        const message = new ReplayRequest({});
        if (data.filename != null) {
            message.filename = data.filename;
        }
        return message;
    }
    toObject() {
        const data: {
            filename?: string;
        } = {};
        if (this.filename != null) {
            data.filename = this.filename;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.filename.length)
            writer.writeString(1, this.filename);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplayRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplayRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.filename = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReplayRequest {
        return ReplayRequest.deserialize(bytes);
    }
}
export class GetMacroDetailRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        filename?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filename" in data && data.filename != undefined) {
                this.filename = data.filename;
            }
        }
    }
    get filename() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set filename(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        filename?: string;
    }): GetMacroDetailRequest {
        const message = new GetMacroDetailRequest({});
        if (data.filename != null) {
            message.filename = data.filename;
        }
        return message;
    }
    toObject() {
        const data: {
            filename?: string;
        } = {};
        if (this.filename != null) {
            data.filename = this.filename;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.filename.length)
            writer.writeString(1, this.filename);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetMacroDetailRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMacroDetailRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.filename = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetMacroDetailRequest {
        return GetMacroDetailRequest.deserialize(bytes);
    }
}
export class GetMacroDetailResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        events?: KeyEvent[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("events" in data && data.events != undefined) {
                this.events = data.events;
            }
        }
    }
    get events() {
        return pb_1.Message.getRepeatedWrapperField(this, KeyEvent, 1) as KeyEvent[];
    }
    set events(value: KeyEvent[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        events?: ReturnType<typeof KeyEvent.prototype.toObject>[];
    }): GetMacroDetailResponse {
        const message = new GetMacroDetailResponse({});
        if (data.events != null) {
            message.events = data.events.map(item => KeyEvent.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            events?: ReturnType<typeof KeyEvent.prototype.toObject>[];
        } = {};
        if (this.events != null) {
            data.events = this.events.map((item: KeyEvent) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.events.length)
            writer.writeRepeatedMessage(1, this.events, (item: KeyEvent) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetMacroDetailResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMacroDetailResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 1, KeyEvent.deserialize(reader), KeyEvent));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetMacroDetailResponse {
        return GetMacroDetailResponse.deserialize(bytes);
    }
}
export class SaveFilesResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        filenames?: string[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filenames" in data && data.filenames != undefined) {
                this.filenames = data.filenames;
            }
        }
    }
    get filenames() {
        return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
    }
    set filenames(value: string[]) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        filenames?: string[];
    }): SaveFilesResponse {
        const message = new SaveFilesResponse({});
        if (data.filenames != null) {
            message.filenames = data.filenames;
        }
        return message;
    }
    toObject() {
        const data: {
            filenames?: string[];
        } = {};
        if (this.filenames != null) {
            data.filenames = this.filenames;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.filenames.length)
            writer.writeRepeatedString(1, this.filenames);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SaveFilesResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SaveFilesResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SaveFilesResponse {
        return SaveFilesResponse.deserialize(bytes);
    }
}
export class SaveMacroRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        events?: KeyEvent[];
        filename?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("events" in data && data.events != undefined) {
                this.events = data.events;
            }
            if ("filename" in data && data.filename != undefined) {
                this.filename = data.filename;
            }
        }
    }
    get events() {
        return pb_1.Message.getRepeatedWrapperField(this, KeyEvent, 1) as KeyEvent[];
    }
    set events(value: KeyEvent[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get filename() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set filename(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        events?: ReturnType<typeof KeyEvent.prototype.toObject>[];
        filename?: string;
    }): SaveMacroRequest {
        const message = new SaveMacroRequest({});
        if (data.events != null) {
            message.events = data.events.map(item => KeyEvent.fromObject(item));
        }
        if (data.filename != null) {
            message.filename = data.filename;
        }
        return message;
    }
    toObject() {
        const data: {
            events?: ReturnType<typeof KeyEvent.prototype.toObject>[];
            filename?: string;
        } = {};
        if (this.events != null) {
            data.events = this.events.map((item: KeyEvent) => item.toObject());
        }
        if (this.filename != null) {
            data.filename = this.filename;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.events.length)
            writer.writeRepeatedMessage(1, this.events, (item: KeyEvent) => item.serialize(writer));
        if (this.filename.length)
            writer.writeString(2, this.filename);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SaveMacroRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SaveMacroRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 1, KeyEvent.deserialize(reader), KeyEvent));
                    break;
                case 2:
                    message.filename = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SaveMacroRequest {
        return SaveMacroRequest.deserialize(bytes);
    }
}
export class SaveMacroResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        success?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
        }
    }
    get success() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set success(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        success?: boolean;
    }): SaveMacroResponse {
        const message = new SaveMacroResponse({});
        if (data.success != null) {
            message.success = data.success;
        }
        return message;
    }
    toObject() {
        const data: {
            success?: boolean;
        } = {};
        if (this.success != null) {
            data.success = this.success;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.success != false)
            writer.writeBool(1, this.success);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SaveMacroResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SaveMacroResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.success = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SaveMacroResponse {
        return SaveMacroResponse.deserialize(bytes);
    }
}
export class DeleteMacrosRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        filenames?: string[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filenames" in data && data.filenames != undefined) {
                this.filenames = data.filenames;
            }
        }
    }
    get filenames() {
        return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
    }
    set filenames(value: string[]) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        filenames?: string[];
    }): DeleteMacrosRequest {
        const message = new DeleteMacrosRequest({});
        if (data.filenames != null) {
            message.filenames = data.filenames;
        }
        return message;
    }
    toObject() {
        const data: {
            filenames?: string[];
        } = {};
        if (this.filenames != null) {
            data.filenames = this.filenames;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.filenames.length)
            writer.writeRepeatedString(1, this.filenames);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteMacrosRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteMacrosRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteMacrosRequest {
        return DeleteMacrosRequest.deserialize(bytes);
    }
}
export class ComplexReplayRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        tasks?: ReplayTask[];
        repeatCount?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("tasks" in data && data.tasks != undefined) {
                this.tasks = data.tasks;
            }
            if ("repeatCount" in data && data.repeatCount != undefined) {
                this.repeatCount = data.repeatCount;
            }
        }
    }
    get tasks() {
        return pb_1.Message.getRepeatedWrapperField(this, ReplayTask, 1) as ReplayTask[];
    }
    set tasks(value: ReplayTask[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get repeatCount() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set repeatCount(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        tasks?: ReturnType<typeof ReplayTask.prototype.toObject>[];
        repeatCount?: number;
    }): ComplexReplayRequest {
        const message = new ComplexReplayRequest({});
        if (data.tasks != null) {
            message.tasks = data.tasks.map(item => ReplayTask.fromObject(item));
        }
        if (data.repeatCount != null) {
            message.repeatCount = data.repeatCount;
        }
        return message;
    }
    toObject() {
        const data: {
            tasks?: ReturnType<typeof ReplayTask.prototype.toObject>[];
            repeatCount?: number;
        } = {};
        if (this.tasks != null) {
            data.tasks = this.tasks.map((item: ReplayTask) => item.toObject());
        }
        if (this.repeatCount != null) {
            data.repeatCount = this.repeatCount;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.tasks.length)
            writer.writeRepeatedMessage(1, this.tasks, (item: ReplayTask) => item.serialize(writer));
        if (this.repeatCount != 0)
            writer.writeInt32(2, this.repeatCount);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ComplexReplayRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ComplexReplayRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.tasks, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ReplayTask.deserialize(reader), ReplayTask));
                    break;
                case 2:
                    message.repeatCount = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ComplexReplayRequest {
        return ComplexReplayRequest.deserialize(bytes);
    }
}
export class ReplayTask extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        filename?: string;
        delayAfter?: number;
        repeatCount?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filename" in data && data.filename != undefined) {
                this.filename = data.filename;
            }
            if ("delayAfter" in data && data.delayAfter != undefined) {
                this.delayAfter = data.delayAfter;
            }
            if ("repeatCount" in data && data.repeatCount != undefined) {
                this.repeatCount = data.repeatCount;
            }
        }
    }
    get filename() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set filename(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get delayAfter() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set delayAfter(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get repeatCount() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set repeatCount(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        filename?: string;
        delayAfter?: number;
        repeatCount?: number;
    }): ReplayTask {
        const message = new ReplayTask({});
        if (data.filename != null) {
            message.filename = data.filename;
        }
        if (data.delayAfter != null) {
            message.delayAfter = data.delayAfter;
        }
        if (data.repeatCount != null) {
            message.repeatCount = data.repeatCount;
        }
        return message;
    }
    toObject() {
        const data: {
            filename?: string;
            delayAfter?: number;
            repeatCount?: number;
        } = {};
        if (this.filename != null) {
            data.filename = this.filename;
        }
        if (this.delayAfter != null) {
            data.delayAfter = this.delayAfter;
        }
        if (this.repeatCount != null) {
            data.repeatCount = this.repeatCount;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.filename.length)
            writer.writeString(1, this.filename);
        if (this.delayAfter != 0)
            writer.writeInt32(2, this.delayAfter);
        if (this.repeatCount != 0)
            writer.writeInt32(3, this.repeatCount);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplayTask {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplayTask();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.filename = reader.readString();
                    break;
                case 2:
                    message.delayAfter = reader.readInt32();
                    break;
                case 3:
                    message.repeatCount = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReplayTask {
        return ReplayTask.deserialize(bytes);
    }
}
export class ImportProfileRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        filename?: string;
        savfile?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filename" in data && data.filename != undefined) {
                this.filename = data.filename;
            }
            if ("savfile" in data && data.savfile != undefined) {
                this.savfile = data.savfile;
            }
        }
    }
    get filename() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set filename(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get savfile() {
        return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
    }
    set savfile(value: Uint8Array) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        filename?: string;
        savfile?: Uint8Array;
    }): ImportProfileRequest {
        const message = new ImportProfileRequest({});
        if (data.filename != null) {
            message.filename = data.filename;
        }
        if (data.savfile != null) {
            message.savfile = data.savfile;
        }
        return message;
    }
    toObject() {
        const data: {
            filename?: string;
            savfile?: Uint8Array;
        } = {};
        if (this.filename != null) {
            data.filename = this.filename;
        }
        if (this.savfile != null) {
            data.savfile = this.savfile;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.filename.length)
            writer.writeString(1, this.filename);
        if (this.savfile.length)
            writer.writeBytes(2, this.savfile);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ImportProfileRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ImportProfileRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.filename = reader.readString();
                    break;
                case 2:
                    message.savfile = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ImportProfileRequest {
        return ImportProfileRequest.deserialize(bytes);
    }
}
export class ExportProfileRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        filename?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filename" in data && data.filename != undefined) {
                this.filename = data.filename;
            }
        }
    }
    get filename() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set filename(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        filename?: string;
    }): ExportProfileRequest {
        const message = new ExportProfileRequest({});
        if (data.filename != null) {
            message.filename = data.filename;
        }
        return message;
    }
    toObject() {
        const data: {
            filename?: string;
        } = {};
        if (this.filename != null) {
            data.filename = this.filename;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.filename.length)
            writer.writeString(1, this.filename);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExportProfileRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExportProfileRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.filename = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ExportProfileRequest {
        return ExportProfileRequest.deserialize(bytes);
    }
}
export class ExportProfileResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        savfile?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("savfile" in data && data.savfile != undefined) {
                this.savfile = data.savfile;
            }
        }
    }
    get savfile() {
        return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
    }
    set savfile(value: Uint8Array) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        savfile?: Uint8Array;
    }): ExportProfileResponse {
        const message = new ExportProfileResponse({});
        if (data.savfile != null) {
            message.savfile = data.savfile;
        }
        return message;
    }
    toObject() {
        const data: {
            savfile?: Uint8Array;
        } = {};
        if (this.savfile != null) {
            data.savfile = this.savfile;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.savfile.length)
            writer.writeBytes(1, this.savfile);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExportProfileResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExportProfileResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.savfile = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ExportProfileResponse {
        return ExportProfileResponse.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedInputService {
    static definition = {
        StartRecording: {
            path: "/Input/StartRecording",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: StartRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => StartRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
        },
        StopRecording: {
            path: "/Input/StopRecording",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: StopRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => StopRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
        },
        StartReplay: {
            path: "/Input/StartReplay",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ReplayRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ReplayRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
        },
        GetMacroDetail: {
            path: "/Input/GetMacroDetail",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetMacroDetailRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetMacroDetailRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GetMacroDetailResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GetMacroDetailResponse.deserialize(new Uint8Array(bytes))
        },
        ReplayMacroDebug: {
            path: "/Input/ReplayMacroDebug",
            requestStream: false,
            responseStream: true,
            requestSerialize: (message: ReplayRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ReplayRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: MacroEvent) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => MacroEvent.deserialize(new Uint8Array(bytes))
        },
        StopReplay: {
            path: "/Input/StopReplay",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: StopReplayRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => StopReplayRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
        },
        ListSaveFiles: {
            path: "/Input/ListSaveFiles",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ListRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ListRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: SaveFilesResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => SaveFilesResponse.deserialize(new Uint8Array(bytes))
        },
        SaveMacro: {
            path: "/Input/SaveMacro",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SaveMacroRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SaveMacroRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: SaveMacroResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => SaveMacroResponse.deserialize(new Uint8Array(bytes))
        },
        DeleteMacros: {
            path: "/Input/DeleteMacros",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: DeleteMacrosRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => DeleteMacrosRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
        },
        StartComplexReplay: {
            path: "/Input/StartComplexReplay",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ComplexReplayRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ComplexReplayRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
        },
        ImportProfile: {
            path: "/Input/ImportProfile",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ImportProfileRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ImportProfileRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
        },
        ExportProfile: {
            path: "/Input/ExportProfile",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ExportProfileRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ExportProfileRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ExportProfileResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ExportProfileResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract StartRecording(call: grpc_1.ServerUnaryCall<StartRequest, StatusResponse>, callback: grpc_1.sendUnaryData<StatusResponse>): void;
    abstract StopRecording(call: grpc_1.ServerUnaryCall<StopRequest, StatusResponse>, callback: grpc_1.sendUnaryData<StatusResponse>): void;
    abstract StartReplay(call: grpc_1.ServerUnaryCall<ReplayRequest, StatusResponse>, callback: grpc_1.sendUnaryData<StatusResponse>): void;
    abstract GetMacroDetail(call: grpc_1.ServerUnaryCall<GetMacroDetailRequest, GetMacroDetailResponse>, callback: grpc_1.sendUnaryData<GetMacroDetailResponse>): void;
    abstract ReplayMacroDebug(call: grpc_1.ServerWritableStream<ReplayRequest, MacroEvent>): void;
    abstract StopReplay(call: grpc_1.ServerUnaryCall<StopReplayRequest, StatusResponse>, callback: grpc_1.sendUnaryData<StatusResponse>): void;
    abstract ListSaveFiles(call: grpc_1.ServerUnaryCall<ListRequest, SaveFilesResponse>, callback: grpc_1.sendUnaryData<SaveFilesResponse>): void;
    abstract SaveMacro(call: grpc_1.ServerUnaryCall<SaveMacroRequest, SaveMacroResponse>, callback: grpc_1.sendUnaryData<SaveMacroResponse>): void;
    abstract DeleteMacros(call: grpc_1.ServerUnaryCall<DeleteMacrosRequest, StatusResponse>, callback: grpc_1.sendUnaryData<StatusResponse>): void;
    abstract StartComplexReplay(call: grpc_1.ServerUnaryCall<ComplexReplayRequest, StatusResponse>, callback: grpc_1.sendUnaryData<StatusResponse>): void;
    abstract ImportProfile(call: grpc_1.ServerUnaryCall<ImportProfileRequest, StatusResponse>, callback: grpc_1.sendUnaryData<StatusResponse>): void;
    abstract ExportProfile(call: grpc_1.ServerUnaryCall<ExportProfileRequest, ExportProfileResponse>, callback: grpc_1.sendUnaryData<ExportProfileResponse>): void;
}
export class InputClient extends grpc_1.makeGenericClientConstructor(UnimplementedInputService.definition, "Input", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    StartRecording: GrpcUnaryServiceInterface<StartRequest, StatusResponse> = (message: StartRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, callback?: grpc_1.requestCallback<StatusResponse>): grpc_1.ClientUnaryCall => {
        return super.StartRecording(message, metadata, options, callback);
    };
    StopRecording: GrpcUnaryServiceInterface<StopRequest, StatusResponse> = (message: StopRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, callback?: grpc_1.requestCallback<StatusResponse>): grpc_1.ClientUnaryCall => {
        return super.StopRecording(message, metadata, options, callback);
    };
    StartReplay: GrpcUnaryServiceInterface<ReplayRequest, StatusResponse> = (message: ReplayRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, callback?: grpc_1.requestCallback<StatusResponse>): grpc_1.ClientUnaryCall => {
        return super.StartReplay(message, metadata, options, callback);
    };
    GetMacroDetail: GrpcUnaryServiceInterface<GetMacroDetailRequest, GetMacroDetailResponse> = (message: GetMacroDetailRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetMacroDetailResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetMacroDetailResponse>, callback?: grpc_1.requestCallback<GetMacroDetailResponse>): grpc_1.ClientUnaryCall => {
        return super.GetMacroDetail(message, metadata, options, callback);
    };
    ReplayMacroDebug: GrpcStreamServiceInterface<ReplayRequest, MacroEvent> = (message: ReplayRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<MacroEvent> => {
        return super.ReplayMacroDebug(message, metadata, options);
    };
    StopReplay: GrpcUnaryServiceInterface<StopReplayRequest, StatusResponse> = (message: StopReplayRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, callback?: grpc_1.requestCallback<StatusResponse>): grpc_1.ClientUnaryCall => {
        return super.StopReplay(message, metadata, options, callback);
    };
    ListSaveFiles: GrpcUnaryServiceInterface<ListRequest, SaveFilesResponse> = (message: ListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SaveFilesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SaveFilesResponse>, callback?: grpc_1.requestCallback<SaveFilesResponse>): grpc_1.ClientUnaryCall => {
        return super.ListSaveFiles(message, metadata, options, callback);
    };
    SaveMacro: GrpcUnaryServiceInterface<SaveMacroRequest, SaveMacroResponse> = (message: SaveMacroRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SaveMacroResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SaveMacroResponse>, callback?: grpc_1.requestCallback<SaveMacroResponse>): grpc_1.ClientUnaryCall => {
        return super.SaveMacro(message, metadata, options, callback);
    };
    DeleteMacros: GrpcUnaryServiceInterface<DeleteMacrosRequest, StatusResponse> = (message: DeleteMacrosRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, callback?: grpc_1.requestCallback<StatusResponse>): grpc_1.ClientUnaryCall => {
        return super.DeleteMacros(message, metadata, options, callback);
    };
    StartComplexReplay: GrpcUnaryServiceInterface<ComplexReplayRequest, StatusResponse> = (message: ComplexReplayRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, callback?: grpc_1.requestCallback<StatusResponse>): grpc_1.ClientUnaryCall => {
        return super.StartComplexReplay(message, metadata, options, callback);
    };
    ImportProfile: GrpcUnaryServiceInterface<ImportProfileRequest, StatusResponse> = (message: ImportProfileRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, callback?: grpc_1.requestCallback<StatusResponse>): grpc_1.ClientUnaryCall => {
        return super.ImportProfile(message, metadata, options, callback);
    };
    ExportProfile: GrpcUnaryServiceInterface<ExportProfileRequest, ExportProfileResponse> = (message: ExportProfileRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ExportProfileResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ExportProfileResponse>, callback?: grpc_1.requestCallback<ExportProfileResponse>): grpc_1.ClientUnaryCall => {
        return super.ExportProfile(message, metadata, options, callback);
    };
}
