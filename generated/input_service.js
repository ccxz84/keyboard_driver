"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _KeyEvent_one_of_decls, _StartRequest_one_of_decls, _StopRequest_one_of_decls, _ListRequest_one_of_decls, _StopReplayRequest_one_of_decls, _StatusResponse_one_of_decls, _MacroEvent_one_of_decls, _ReplayRequest_one_of_decls, _GetMacroDetailRequest_one_of_decls, _GetMacroDetailResponse_one_of_decls, _SaveFilesResponse_one_of_decls, _SaveMacroRequest_one_of_decls, _SaveMacroResponse_one_of_decls, _DeleteMacrosRequest_one_of_decls, _ComplexReplayRequest_one_of_decls, _ReplayTask_one_of_decls, _ImportProfileRequest_one_of_decls, _ExportProfileRequest_one_of_decls, _ExportProfileResponse_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InputClient = exports.UnimplementedInputService = exports.ExportProfileResponse = exports.ExportProfileRequest = exports.ImportProfileRequest = exports.ReplayTask = exports.ComplexReplayRequest = exports.DeleteMacrosRequest = exports.SaveMacroResponse = exports.SaveMacroRequest = exports.SaveFilesResponse = exports.GetMacroDetailResponse = exports.GetMacroDetailRequest = exports.ReplayRequest = exports.MacroEvent = exports.StatusResponse = exports.StopReplayRequest = exports.ListRequest = exports.StopRequest = exports.StartRequest = exports.KeyEvent = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: input_service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = __importStar(require("google-protobuf"));
const grpc_1 = __importStar(require("@grpc/grpc-js"));
class KeyEvent extends pb_1.Message {
    constructor(data) {
        super();
        _KeyEvent_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _KeyEvent_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("delay" in data && data.delay != undefined) {
                this.delay = data.delay;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get delay() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set delay(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get data() {
        return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0));
    }
    set data(value) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data) {
        const message = new KeyEvent({});
        if (data.delay != null) {
            message.delay = data.delay;
        }
        if (data.data != null) {
            message.data = data.data;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.delay != null) {
            data.delay = this.delay;
        }
        if (this.data != null) {
            data.data = this.data;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.delay != 0)
            writer.writeUint64(1, this.delay);
        if (this.data.length)
            writer.writeBytes(2, this.data);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeyEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.delay = reader.readUint64();
                    break;
                case 2:
                    message.data = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return KeyEvent.deserialize(bytes);
    }
}
exports.KeyEvent = KeyEvent;
_KeyEvent_one_of_decls = new WeakMap();
class StartRequest extends pb_1.Message {
    constructor(data) {
        super();
        _StartRequest_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _StartRequest_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filename" in data && data.filename != undefined) {
                this.filename = data.filename;
            }
        }
    }
    get filename() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set filename(value) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data) {
        const message = new StartRequest({});
        if (data.filename != null) {
            message.filename = data.filename;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.filename != null) {
            data.filename = this.filename;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.filename.length)
            writer.writeString(1, this.filename);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StartRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.filename = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return StartRequest.deserialize(bytes);
    }
}
exports.StartRequest = StartRequest;
_StartRequest_one_of_decls = new WeakMap();
class StopRequest extends pb_1.Message {
    constructor(data) {
        super();
        _StopRequest_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _StopRequest_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data) {
        const message = new StopRequest({});
        return message;
    }
    toObject() {
        const data = {};
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StopRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return StopRequest.deserialize(bytes);
    }
}
exports.StopRequest = StopRequest;
_StopRequest_one_of_decls = new WeakMap();
class ListRequest extends pb_1.Message {
    constructor(data) {
        super();
        _ListRequest_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _ListRequest_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data) {
        const message = new ListRequest({});
        return message;
    }
    toObject() {
        const data = {};
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return ListRequest.deserialize(bytes);
    }
}
exports.ListRequest = ListRequest;
_ListRequest_one_of_decls = new WeakMap();
class StopReplayRequest extends pb_1.Message {
    constructor(data) {
        super();
        _StopReplayRequest_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _StopReplayRequest_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data) {
        const message = new StopReplayRequest({});
        return message;
    }
    toObject() {
        const data = {};
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StopReplayRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return StopReplayRequest.deserialize(bytes);
    }
}
exports.StopReplayRequest = StopReplayRequest;
_StopReplayRequest_one_of_decls = new WeakMap();
class StatusResponse extends pb_1.Message {
    constructor(data) {
        super();
        _StatusResponse_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _StatusResponse_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set message(value) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data) {
        const message = new StatusResponse({});
        if (data.message != null) {
            message.message = data.message;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return StatusResponse.deserialize(bytes);
    }
}
exports.StatusResponse = StatusResponse;
_StatusResponse_one_of_decls = new WeakMap();
class MacroEvent extends pb_1.Message {
    constructor(data) {
        super();
        _MacroEvent_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _MacroEvent_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("eventDescription" in data && data.eventDescription != undefined) {
                this.eventDescription = data.eventDescription;
            }
        }
    }
    get eventDescription() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set eventDescription(value) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data) {
        const message = new MacroEvent({});
        if (data.eventDescription != null) {
            message.eventDescription = data.eventDescription;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.eventDescription != null) {
            data.eventDescription = this.eventDescription;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.eventDescription.length)
            writer.writeString(1, this.eventDescription);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MacroEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.eventDescription = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return MacroEvent.deserialize(bytes);
    }
}
exports.MacroEvent = MacroEvent;
_MacroEvent_one_of_decls = new WeakMap();
class ReplayRequest extends pb_1.Message {
    constructor(data) {
        super();
        _ReplayRequest_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _ReplayRequest_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filename" in data && data.filename != undefined) {
                this.filename = data.filename;
            }
        }
    }
    get filename() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set filename(value) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data) {
        const message = new ReplayRequest({});
        if (data.filename != null) {
            message.filename = data.filename;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.filename != null) {
            data.filename = this.filename;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.filename.length)
            writer.writeString(1, this.filename);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplayRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.filename = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return ReplayRequest.deserialize(bytes);
    }
}
exports.ReplayRequest = ReplayRequest;
_ReplayRequest_one_of_decls = new WeakMap();
class GetMacroDetailRequest extends pb_1.Message {
    constructor(data) {
        super();
        _GetMacroDetailRequest_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _GetMacroDetailRequest_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filename" in data && data.filename != undefined) {
                this.filename = data.filename;
            }
        }
    }
    get filename() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set filename(value) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data) {
        const message = new GetMacroDetailRequest({});
        if (data.filename != null) {
            message.filename = data.filename;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.filename != null) {
            data.filename = this.filename;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.filename.length)
            writer.writeString(1, this.filename);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMacroDetailRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.filename = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return GetMacroDetailRequest.deserialize(bytes);
    }
}
exports.GetMacroDetailRequest = GetMacroDetailRequest;
_GetMacroDetailRequest_one_of_decls = new WeakMap();
class GetMacroDetailResponse extends pb_1.Message {
    constructor(data) {
        super();
        _GetMacroDetailResponse_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, _GetMacroDetailResponse_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("events" in data && data.events != undefined) {
                this.events = data.events;
            }
        }
    }
    get events() {
        return pb_1.Message.getRepeatedWrapperField(this, KeyEvent, 1);
    }
    set events(value) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data) {
        const message = new GetMacroDetailResponse({});
        if (data.events != null) {
            message.events = data.events.map(item => KeyEvent.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.events != null) {
            data.events = this.events.map((item) => item.toObject());
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.events.length)
            writer.writeRepeatedMessage(1, this.events, (item) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMacroDetailResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 1, KeyEvent.deserialize(reader), KeyEvent));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return GetMacroDetailResponse.deserialize(bytes);
    }
}
exports.GetMacroDetailResponse = GetMacroDetailResponse;
_GetMacroDetailResponse_one_of_decls = new WeakMap();
class SaveFilesResponse extends pb_1.Message {
    constructor(data) {
        super();
        _SaveFilesResponse_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, _SaveFilesResponse_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filenames" in data && data.filenames != undefined) {
                this.filenames = data.filenames;
            }
        }
    }
    get filenames() {
        return pb_1.Message.getFieldWithDefault(this, 1, []);
    }
    set filenames(value) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data) {
        const message = new SaveFilesResponse({});
        if (data.filenames != null) {
            message.filenames = data.filenames;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.filenames != null) {
            data.filenames = this.filenames;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.filenames.length)
            writer.writeRepeatedString(1, this.filenames);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SaveFilesResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return SaveFilesResponse.deserialize(bytes);
    }
}
exports.SaveFilesResponse = SaveFilesResponse;
_SaveFilesResponse_one_of_decls = new WeakMap();
class SaveMacroRequest extends pb_1.Message {
    constructor(data) {
        super();
        _SaveMacroRequest_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, _SaveMacroRequest_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("events" in data && data.events != undefined) {
                this.events = data.events;
            }
            if ("filename" in data && data.filename != undefined) {
                this.filename = data.filename;
            }
        }
    }
    get events() {
        return pb_1.Message.getRepeatedWrapperField(this, KeyEvent, 1);
    }
    set events(value) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get filename() {
        return pb_1.Message.getFieldWithDefault(this, 2, "");
    }
    set filename(value) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data) {
        const message = new SaveMacroRequest({});
        if (data.events != null) {
            message.events = data.events.map(item => KeyEvent.fromObject(item));
        }
        if (data.filename != null) {
            message.filename = data.filename;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.events != null) {
            data.events = this.events.map((item) => item.toObject());
        }
        if (this.filename != null) {
            data.filename = this.filename;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.events.length)
            writer.writeRepeatedMessage(1, this.events, (item) => item.serialize(writer));
        if (this.filename.length)
            writer.writeString(2, this.filename);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SaveMacroRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 1, KeyEvent.deserialize(reader), KeyEvent));
                    break;
                case 2:
                    message.filename = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return SaveMacroRequest.deserialize(bytes);
    }
}
exports.SaveMacroRequest = SaveMacroRequest;
_SaveMacroRequest_one_of_decls = new WeakMap();
class SaveMacroResponse extends pb_1.Message {
    constructor(data) {
        super();
        _SaveMacroResponse_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _SaveMacroResponse_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
        }
    }
    get success() {
        return pb_1.Message.getFieldWithDefault(this, 1, false);
    }
    set success(value) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data) {
        const message = new SaveMacroResponse({});
        if (data.success != null) {
            message.success = data.success;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.success != null) {
            data.success = this.success;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.success != false)
            writer.writeBool(1, this.success);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SaveMacroResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.success = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return SaveMacroResponse.deserialize(bytes);
    }
}
exports.SaveMacroResponse = SaveMacroResponse;
_SaveMacroResponse_one_of_decls = new WeakMap();
class DeleteMacrosRequest extends pb_1.Message {
    constructor(data) {
        super();
        _DeleteMacrosRequest_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, _DeleteMacrosRequest_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filenames" in data && data.filenames != undefined) {
                this.filenames = data.filenames;
            }
        }
    }
    get filenames() {
        return pb_1.Message.getFieldWithDefault(this, 1, []);
    }
    set filenames(value) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data) {
        const message = new DeleteMacrosRequest({});
        if (data.filenames != null) {
            message.filenames = data.filenames;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.filenames != null) {
            data.filenames = this.filenames;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.filenames.length)
            writer.writeRepeatedString(1, this.filenames);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteMacrosRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return DeleteMacrosRequest.deserialize(bytes);
    }
}
exports.DeleteMacrosRequest = DeleteMacrosRequest;
_DeleteMacrosRequest_one_of_decls = new WeakMap();
class ComplexReplayRequest extends pb_1.Message {
    constructor(data) {
        super();
        _ComplexReplayRequest_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, _ComplexReplayRequest_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("tasks" in data && data.tasks != undefined) {
                this.tasks = data.tasks;
            }
            if ("repeatCount" in data && data.repeatCount != undefined) {
                this.repeatCount = data.repeatCount;
            }
        }
    }
    get tasks() {
        return pb_1.Message.getRepeatedWrapperField(this, ReplayTask, 1);
    }
    set tasks(value) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get repeatCount() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0);
    }
    set repeatCount(value) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data) {
        const message = new ComplexReplayRequest({});
        if (data.tasks != null) {
            message.tasks = data.tasks.map(item => ReplayTask.fromObject(item));
        }
        if (data.repeatCount != null) {
            message.repeatCount = data.repeatCount;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.tasks != null) {
            data.tasks = this.tasks.map((item) => item.toObject());
        }
        if (this.repeatCount != null) {
            data.repeatCount = this.repeatCount;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.tasks.length)
            writer.writeRepeatedMessage(1, this.tasks, (item) => item.serialize(writer));
        if (this.repeatCount != 0)
            writer.writeInt32(2, this.repeatCount);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ComplexReplayRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.tasks, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ReplayTask.deserialize(reader), ReplayTask));
                    break;
                case 2:
                    message.repeatCount = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return ComplexReplayRequest.deserialize(bytes);
    }
}
exports.ComplexReplayRequest = ComplexReplayRequest;
_ComplexReplayRequest_one_of_decls = new WeakMap();
class ReplayTask extends pb_1.Message {
    constructor(data) {
        super();
        _ReplayTask_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _ReplayTask_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filename" in data && data.filename != undefined) {
                this.filename = data.filename;
            }
            if ("delayAfter" in data && data.delayAfter != undefined) {
                this.delayAfter = data.delayAfter;
            }
            if ("repeatCount" in data && data.repeatCount != undefined) {
                this.repeatCount = data.repeatCount;
            }
        }
    }
    get filename() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set filename(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get delayAfter() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0);
    }
    set delayAfter(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get repeatCount() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0);
    }
    set repeatCount(value) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data) {
        const message = new ReplayTask({});
        if (data.filename != null) {
            message.filename = data.filename;
        }
        if (data.delayAfter != null) {
            message.delayAfter = data.delayAfter;
        }
        if (data.repeatCount != null) {
            message.repeatCount = data.repeatCount;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.filename != null) {
            data.filename = this.filename;
        }
        if (this.delayAfter != null) {
            data.delayAfter = this.delayAfter;
        }
        if (this.repeatCount != null) {
            data.repeatCount = this.repeatCount;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.filename.length)
            writer.writeString(1, this.filename);
        if (this.delayAfter != 0)
            writer.writeInt32(2, this.delayAfter);
        if (this.repeatCount != 0)
            writer.writeInt32(3, this.repeatCount);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplayTask();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.filename = reader.readString();
                    break;
                case 2:
                    message.delayAfter = reader.readInt32();
                    break;
                case 3:
                    message.repeatCount = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return ReplayTask.deserialize(bytes);
    }
}
exports.ReplayTask = ReplayTask;
_ReplayTask_one_of_decls = new WeakMap();
class ImportProfileRequest extends pb_1.Message {
    constructor(data) {
        super();
        _ImportProfileRequest_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _ImportProfileRequest_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filename" in data && data.filename != undefined) {
                this.filename = data.filename;
            }
            if ("savfile" in data && data.savfile != undefined) {
                this.savfile = data.savfile;
            }
        }
    }
    get filename() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set filename(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get savfile() {
        return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0));
    }
    set savfile(value) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data) {
        const message = new ImportProfileRequest({});
        if (data.filename != null) {
            message.filename = data.filename;
        }
        if (data.savfile != null) {
            message.savfile = data.savfile;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.filename != null) {
            data.filename = this.filename;
        }
        if (this.savfile != null) {
            data.savfile = this.savfile;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.filename.length)
            writer.writeString(1, this.filename);
        if (this.savfile.length)
            writer.writeBytes(2, this.savfile);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ImportProfileRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.filename = reader.readString();
                    break;
                case 2:
                    message.savfile = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return ImportProfileRequest.deserialize(bytes);
    }
}
exports.ImportProfileRequest = ImportProfileRequest;
_ImportProfileRequest_one_of_decls = new WeakMap();
class ExportProfileRequest extends pb_1.Message {
    constructor(data) {
        super();
        _ExportProfileRequest_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _ExportProfileRequest_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filename" in data && data.filename != undefined) {
                this.filename = data.filename;
            }
        }
    }
    get filename() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set filename(value) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data) {
        const message = new ExportProfileRequest({});
        if (data.filename != null) {
            message.filename = data.filename;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.filename != null) {
            data.filename = this.filename;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.filename.length)
            writer.writeString(1, this.filename);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExportProfileRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.filename = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return ExportProfileRequest.deserialize(bytes);
    }
}
exports.ExportProfileRequest = ExportProfileRequest;
_ExportProfileRequest_one_of_decls = new WeakMap();
class ExportProfileResponse extends pb_1.Message {
    constructor(data) {
        super();
        _ExportProfileResponse_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _ExportProfileResponse_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("savfile" in data && data.savfile != undefined) {
                this.savfile = data.savfile;
            }
        }
    }
    get savfile() {
        return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0));
    }
    set savfile(value) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data) {
        const message = new ExportProfileResponse({});
        if (data.savfile != null) {
            message.savfile = data.savfile;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.savfile != null) {
            data.savfile = this.savfile;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.savfile.length)
            writer.writeBytes(1, this.savfile);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExportProfileResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.savfile = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return ExportProfileResponse.deserialize(bytes);
    }
}
exports.ExportProfileResponse = ExportProfileResponse;
_ExportProfileResponse_one_of_decls = new WeakMap();
class UnimplementedInputService {
}
exports.UnimplementedInputService = UnimplementedInputService;
UnimplementedInputService.definition = {
    StartRecording: {
        path: "/Input/StartRecording",
        requestStream: false,
        responseStream: false,
        requestSerialize: (message) => Buffer.from(message.serialize()),
        requestDeserialize: (bytes) => StartRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message) => Buffer.from(message.serialize()),
        responseDeserialize: (bytes) => StatusResponse.deserialize(new Uint8Array(bytes))
    },
    StopRecording: {
        path: "/Input/StopRecording",
        requestStream: false,
        responseStream: false,
        requestSerialize: (message) => Buffer.from(message.serialize()),
        requestDeserialize: (bytes) => StopRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message) => Buffer.from(message.serialize()),
        responseDeserialize: (bytes) => StatusResponse.deserialize(new Uint8Array(bytes))
    },
    StartReplay: {
        path: "/Input/StartReplay",
        requestStream: false,
        responseStream: false,
        requestSerialize: (message) => Buffer.from(message.serialize()),
        requestDeserialize: (bytes) => ReplayRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message) => Buffer.from(message.serialize()),
        responseDeserialize: (bytes) => StatusResponse.deserialize(new Uint8Array(bytes))
    },
    GetMacroDetail: {
        path: "/Input/GetMacroDetail",
        requestStream: false,
        responseStream: false,
        requestSerialize: (message) => Buffer.from(message.serialize()),
        requestDeserialize: (bytes) => GetMacroDetailRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message) => Buffer.from(message.serialize()),
        responseDeserialize: (bytes) => GetMacroDetailResponse.deserialize(new Uint8Array(bytes))
    },
    ReplayMacroDebug: {
        path: "/Input/ReplayMacroDebug",
        requestStream: false,
        responseStream: true,
        requestSerialize: (message) => Buffer.from(message.serialize()),
        requestDeserialize: (bytes) => ReplayRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message) => Buffer.from(message.serialize()),
        responseDeserialize: (bytes) => MacroEvent.deserialize(new Uint8Array(bytes))
    },
    StopReplay: {
        path: "/Input/StopReplay",
        requestStream: false,
        responseStream: false,
        requestSerialize: (message) => Buffer.from(message.serialize()),
        requestDeserialize: (bytes) => StopReplayRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message) => Buffer.from(message.serialize()),
        responseDeserialize: (bytes) => StatusResponse.deserialize(new Uint8Array(bytes))
    },
    ListSaveFiles: {
        path: "/Input/ListSaveFiles",
        requestStream: false,
        responseStream: false,
        requestSerialize: (message) => Buffer.from(message.serialize()),
        requestDeserialize: (bytes) => ListRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message) => Buffer.from(message.serialize()),
        responseDeserialize: (bytes) => SaveFilesResponse.deserialize(new Uint8Array(bytes))
    },
    SaveMacro: {
        path: "/Input/SaveMacro",
        requestStream: false,
        responseStream: false,
        requestSerialize: (message) => Buffer.from(message.serialize()),
        requestDeserialize: (bytes) => SaveMacroRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message) => Buffer.from(message.serialize()),
        responseDeserialize: (bytes) => SaveMacroResponse.deserialize(new Uint8Array(bytes))
    },
    DeleteMacros: {
        path: "/Input/DeleteMacros",
        requestStream: false,
        responseStream: false,
        requestSerialize: (message) => Buffer.from(message.serialize()),
        requestDeserialize: (bytes) => DeleteMacrosRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message) => Buffer.from(message.serialize()),
        responseDeserialize: (bytes) => StatusResponse.deserialize(new Uint8Array(bytes))
    },
    StartComplexReplay: {
        path: "/Input/StartComplexReplay",
        requestStream: false,
        responseStream: false,
        requestSerialize: (message) => Buffer.from(message.serialize()),
        requestDeserialize: (bytes) => ComplexReplayRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message) => Buffer.from(message.serialize()),
        responseDeserialize: (bytes) => StatusResponse.deserialize(new Uint8Array(bytes))
    },
    ImportProfile: {
        path: "/Input/ImportProfile",
        requestStream: false,
        responseStream: false,
        requestSerialize: (message) => Buffer.from(message.serialize()),
        requestDeserialize: (bytes) => ImportProfileRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message) => Buffer.from(message.serialize()),
        responseDeserialize: (bytes) => StatusResponse.deserialize(new Uint8Array(bytes))
    },
    ExportProfile: {
        path: "/Input/ExportProfile",
        requestStream: false,
        responseStream: false,
        requestSerialize: (message) => Buffer.from(message.serialize()),
        requestDeserialize: (bytes) => ExportProfileRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message) => Buffer.from(message.serialize()),
        responseDeserialize: (bytes) => ExportProfileResponse.deserialize(new Uint8Array(bytes))
    }
};
class InputClient extends grpc_1.makeGenericClientConstructor(UnimplementedInputService.definition, "Input", {}) {
    constructor(address, credentials, options) {
        super(address, credentials, options);
        this.StartRecording = (message, metadata, options, callback) => {
            return super.StartRecording(message, metadata, options, callback);
        };
        this.StopRecording = (message, metadata, options, callback) => {
            return super.StopRecording(message, metadata, options, callback);
        };
        this.StartReplay = (message, metadata, options, callback) => {
            return super.StartReplay(message, metadata, options, callback);
        };
        this.GetMacroDetail = (message, metadata, options, callback) => {
            return super.GetMacroDetail(message, metadata, options, callback);
        };
        this.ReplayMacroDebug = (message, metadata, options) => {
            return super.ReplayMacroDebug(message, metadata, options);
        };
        this.StopReplay = (message, metadata, options, callback) => {
            return super.StopReplay(message, metadata, options, callback);
        };
        this.ListSaveFiles = (message, metadata, options, callback) => {
            return super.ListSaveFiles(message, metadata, options, callback);
        };
        this.SaveMacro = (message, metadata, options, callback) => {
            return super.SaveMacro(message, metadata, options, callback);
        };
        this.DeleteMacros = (message, metadata, options, callback) => {
            return super.DeleteMacros(message, metadata, options, callback);
        };
        this.StartComplexReplay = (message, metadata, options, callback) => {
            return super.StartComplexReplay(message, metadata, options, callback);
        };
        this.ImportProfile = (message, metadata, options, callback) => {
            return super.ImportProfile(message, metadata, options, callback);
        };
        this.ExportProfile = (message, metadata, options, callback) => {
            return super.ExportProfile(message, metadata, options, callback);
        };
    }
}
exports.InputClient = InputClient;
